{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9d49cc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import utils\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "sns.set_style('ticks')\n",
    "plt.rcParams['figure.figsize'] = (6, 4)\n",
    "plt.rcParams['axes.titlesize'] = 20\n",
    "plt.rcParams['axes.labelsize'] = 16\n",
    "plt.rcParams['xtick.labelsize'] = 16\n",
    "plt.rcParams['ytick.labelsize'] = 16\n",
    "\n",
    "pd.options.display.max_info_columns=250\n",
    "pd.options.display.max_columns=500\n",
    "pd.options.display.max_rows=100\n",
    "\n",
    "# Silence future warnings\n",
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9eaf81e4",
   "metadata": {},
   "source": [
    "___\n",
    "# Get to know the CHIFIR dataset\n",
    "\n",
    "_The corpus of Cytology and Histopathology Invasive Fungal Infection Reports (CHIFIR) is available at [PhysioNet](https://physionet.org/content/corpus-fungal-infections/1.0.0/). Since these are medical reports and can contain sensitive information, the dataset can only be accessed by credentialed users who have signed the Data Use Agreement._\n",
    "\n",
    "\n",
    "**Background**\n",
    "\n",
    "Cytology and histopathology reports are a common type of clinical documentation. These are pathologist-produced free-text reports outlining the macroscopic and microscopic structure of a specimen. Depending on the sample and what it contains, a report might describe its overall structure, which types cells or tissue can be seen, and any pathological findings. In other words, the information contained in a report can vary a lot and directly depends on the patient's medical condition.\n",
    "\n",
    "CHIFIR was created to support the development of an automated tool for the detection of invasive fungal infection (IFI). IFIs are rare but serious infections most commonly affecting immunocompromised and critically ill patients. Traditionally, surveillance of IFI is a laboriuos process which requires a physician to perform a detailed review of patient's medical history. Histopathology reports play a key role as they provide, albeit not with 100% certainty, evidence for the presence or absence of IFI.  \n",
    "\n",
    "\n",
    "**Aim**\n",
    "\n",
    "As mentioned above, the ultimate goal is to build a tool that can accurately detect IFI based on a patient's medical history. Part of this is to be able to tell if any associated histopathology reports contain any evidence for IFI. This can be done in two steps:\n",
    "- By extractinf any relevant information from a report, e.g., phrases describing fungal organisms.\n",
    "- Based on this information, classifying a report as positive or negative for IFI.\n",
    "\n",
    "In this tutorial, we will be focussing on the task of information extraction, specifically, named-entity recognition (NER). This means we would like to **detect words or phrases in the text that describe a particular concept**. Since the reports are free-text, we might need to use text analytics and natural language processing (NLP) methods. But first let's take a look at the data..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49f35d5a",
   "metadata": {},
   "source": [
    "___\n",
    "# Explore the CHIFIR dataset\n",
    "### Metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f70724db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(283, 6)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>histopathology_id</th>\n",
       "      <th>patient_id</th>\n",
       "      <th>report_no</th>\n",
       "      <th>y_report</th>\n",
       "      <th>dataset</th>\n",
       "      <th>val_fold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>658</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>Positive</td>\n",
       "      <td>development</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>189</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>Positive</td>\n",
       "      <td>development</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>529</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>Negative</td>\n",
       "      <td>development</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>325</td>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>Positive</td>\n",
       "      <td>development</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>559</td>\n",
       "      <td>28</td>\n",
       "      <td>3</td>\n",
       "      <td>Negative</td>\n",
       "      <td>development</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   histopathology_id  patient_id  report_no  y_report      dataset  val_fold\n",
       "0                658          13          1  Positive  development      10.0\n",
       "1                189          14          1  Positive  development       7.0\n",
       "2                529          28          1  Negative  development       8.0\n",
       "3                325          28          2  Positive  development       8.0\n",
       "4                559          28          3  Negative  development       8.0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load a csv file with report metadata\n",
    "path = \"../../../Data/CHIFIR/\"\n",
    "df = pd.read_csv(path + \"chifir_metadata.csv\")\n",
    "print(df.shape)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "152e5253",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 283 entries, 0 to 282\n",
      "Data columns (total 6 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   histopathology_id  283 non-null    int64  \n",
      " 1   patient_id         283 non-null    int64  \n",
      " 2   report_no          283 non-null    int64  \n",
      " 3   y_report           283 non-null    object \n",
      " 4   dataset            283 non-null    object \n",
      " 5   val_fold           231 non-null    float64\n",
      "dtypes: float64(1), int64(3), object(2)\n",
      "memory usage: 13.4+ KB\n"
     ]
    }
   ],
   "source": [
    "# What does this file contain?\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "324a94f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "201"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of patients\n",
    "df.patient_id.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3016102f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "min    1\n",
       "max    6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Number of reports per patient\n",
    "df.groupby('patient_id').size().aggregate(['min', 'max'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c6919fbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "y_report\n",
       "Negative    243\n",
       "Positive     40\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Report-level annotations\n",
    "df.y_report.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3c636ad5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "y_report\n",
       "Negative    0.86\n",
       "Positive    0.14\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Proportion of positive reports\n",
    "df.y_report.value_counts(normalize=True).round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d645dd27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dataset\n",
       "development    231\n",
       "test            52\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Recommended data split: development and test sets\n",
    "df.dataset.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "99349336",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "val_fold\n",
       "1.0     21\n",
       "2.0     19\n",
       "3.0     19\n",
       "4.0     30\n",
       "5.0     19\n",
       "6.0     26\n",
       "7.0     29\n",
       "8.0     29\n",
       "9.0     18\n",
       "10.0    21\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Recommended data split for 10-fold cross-validation -- ensures reports from the same patient are allocated to the same fold.\n",
    "df[df.dataset=='development'].val_fold.value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "945a966b",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "<b>Tip:</b> Use the same cross-validation split to compare different models/approaches otherwise your results might not be reliable. Here, we appended fold numbers to the dataset; you can also reproduce the splitting strategy each time but make sure to initialise the random number generator with the same value.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5295ed3d",
   "metadata": {},
   "source": [
    "___\n",
    "### Reports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "36ba1125",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add free-text reports to the dataframe\n",
    "df['report'] = df.apply(utils.read_report, path=path + \"reports/\", axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51c0367d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"URNO     XXXXXXXXX \n",
      "Lab No    XXXXXXXXX        Specimen  CEREBROSPINAL FLUID \n",
      "\n",
      "\n",
      "SPECIMEN \n",
      "CSF \n",
      "\n",
      "REQUEST DETAILS \n",
      "Stage IV FL- on bispecific Ab. Noted Cryptococcus isolate in left pleural lesion and positive serum cryptococcal Ag. Exclude CNS involvement. \n",
      "\n",
      "MACROSCOPIC DESCRIPTION \n",
      "Specimen labelled with patient details and \"\" XXX 1440 (2) ward XX\"\" \n",
      "3ml clear colourless fluid, 4 Giemsa slides prepared (Additional 2 Giemsa slide prepared from remainder of volume) \n",
      "(HR XXXXXXXXX) \n",
      "\n",
      "MICROSCOPIC DESCRIPTION \n",
      "The slides show mature lymphocytes and monocytes. There are rare red blood cells in the background. No organisms are seen with a Giemsa stain. No atypical cells are seen. \n",
      "\n",
      "OPINION \n",
      "CSF - No organisms seen. Negative for malignancy. \n",
      "\n",
      "\n",
      "Reported by Dr XXXXXXXXXX with Dr XXXXXXXXX, XXXXXXXXXXXXXXXXXXXXXXXXXXXXX, validated XXXXXXXXXXX \"\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# What does a report look like? Let's look at an example\n",
    "print(df.report.iloc[20])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4505766",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "<li>Personal identifiying information is replaced with a string of Xs of equal length.</li>\n",
    "<br/>\n",
    "<li>Report sections are separated by newline characters and headers in caps lock.</li>\n",
    "<br/>\n",
    "<li>The report uses some abbreviations and specific terminology, it is characterised by short and sometimes incomplete sentences.</li>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f3b212c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"XXXXXX M XXXXXXXXXX  Report (XXXXXXXX)\n",
      "CLINICAL NOTES:   Known (illegible) microspores on perfungal PCR from bronch. On (illegible) -> change to (illegible). Ongoing fevers, graft failure post allo SCT.  (Please prioritise fungal        \n",
      "cultures).  Unsure on sensitivities.     MACROSCOPIC DESCRIPTION:   Unlabelled as to site\"\":  Two tissue core fragments  3mm and 4mm.  A1.   (MM)   MICROSCOPIC DESCRIPTION:   The sections show\"\"       \n",
      "multiple fragments of tissue which appears to be  predominantly necrotic pulmonary parenchyma.  However, embedded within  this material there appears to be fragmented structures present which        \n",
      "represent necrotic fungi in intravascular spaces These are positive  with PAS and GMS No evidence of epithelium or acute inflammation is  identified.   DIAGNOSIS:   Unlabelled as to site\"\": fungal\"\"        \n",
      "organisms present in vascular spaces.\"\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Are all reports structured in the same way?\n",
    "print(df.report.iloc[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6254c63a",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Not quite. Some formatting may have been lost during data transfer. Headers vary, for example, of the concluding section: <code>OPINION</code> vs <code>DIAGNOSIS</code>.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ba98f143",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count     283.000000\n",
      "mean     1353.328622\n",
      "std       715.553286\n",
      "min       381.000000\n",
      "25%       802.500000\n",
      "50%      1176.000000\n",
      "75%      1729.000000\n",
      "max      4053.000000\n",
      "Name: report_length, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's calculate the character length of reports\n",
    "df['report_length'] = df.report.apply(len)\n",
    "\n",
    "# Report length varies from approx. 400 to 4000 characters\n",
    "print(df.report_length.describe())\n",
    "\n",
    "sns.histplot(x='report_length', data=df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "32444dde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiEAAAF/CAYAAACfexmdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABH00lEQVR4nO3dd1gU1/4G8Hcpy7JgQzoqUWExEjvYomJvidGoWK9d0VhjbKRoLHgtGEsklsSrRqKJsSZqTEQF1CRi46qxIHaK0lRkaYvs/P7gt3tdWRQQdpb1/TyPj9k5Z/Z8d8fI68w5MxJBEAQQERERGZiZ2AUQERHRm4khhIiIiETBEEJERESiYAghIiIiUTCEEBERkSgYQoiIiEgUDCFEREQkCoYQIiIiEoWF2AUYI7VajeTkZNjY2EAikYhdDhERUYUhCAIyMzPh6OgIM7OXn+tgCNEjOTkZfn5+YpdBRERUYUVGRsLZ2fmlfYw2hBw/fhwfffRRke09e/bEqlWrtK9TU1Oxbt06nDx5EklJSXBwcED37t0xceJE2NjYlGhsTf/IyEjY2tqW7gMQERG9gZRKJfz8/Ir1s9doQ8jVq1cBAL6+vnqTVJMmTbT/nZycjEGDBiEhIQEKhQLt27fH5cuXsWnTJpw8eRI7duwoUZjQXIKxtbVlCCEiIiqF4kxnMPoQ8sUXX6BevXov7RsUFISEhAQEBARgxowZAACVSoXZs2fj8OHDCAkJQWBgYLnXTERERMVntKtjrl69CisrK3h4eLy03/379xEWFgYXFxdMnTpVu10qlWLRokWwsbHBzp07kZOTU94lExERUQkYZQh5/PgxHjx4AC8vL1hYvPxkzYkTJ6BWq+Hn5wdLS0udtkqVKqFly5bIyspCVFRUeZZMREREJWSUl2M0l2JcXFwQHByMY8eOITExEfb29ujWrRsmTJiAKlWqAABu3LgBAFAoFHrfy8PDA8eOHcONGze44oWIqAIRBAHPnj1Dfn6+2KXQc8zNzWFhYVEmt7AwyhBy5coVAMAff/wBGxsbNG/eHM7Ozrh8+TI2b96M48eP44cffoCDgwNSUlIAAA4ODnrfS7M9NTW1yPFUKhVUKpX2tVKpLKuPQkREpaBSqfDgwQNkZWWJXQrpIZfL4eLiAqlU+lrvY5Qh5Nq1awCA9u3bY8WKFahUqRIA4NGjR5g+fTpOnz6NuXPnYsOGDdo/oDKZTO97aba/7A/yxo0bERISUpYfgYiISkmtVuPOnTswNzeHq6srpFIpbxxpJARBgEqlQkpKCu7cuQNPT89X3pDsZYwyhCxbtgzTpk2Ds7OzTriws7PD8uXL0b17d4SHhyM+Ph7m5uYAil4KJAiCzu/6jB8/HqNGjdK+1qxxJiIiw1OpVFCr1ahZsybkcrnY5dALrK2tYWlpiXv37kGlUhV5EqA4jHJiqlQqxVtvvaX3gzk5OaF+/foACi7baP6A5ubm6n0vzXZra+uXjqe5JwjvDUJEZBxe51/YVL7K6thUyCNsb28PAMjOzoajoyMAaOeGvOhVc0aIiIhIHEYXQlQqFT7//HNMnDixyHkccXFxAABnZ2ftqphbt27p7RsbGwsA8PLyKodqiYiIxJOfn6/9mVgRGV0IkUql+Ouvv3Ds2DGcOHGiUPv169dx/fp1VKpUCY0bN0bbtm0BAOHh4YWWcWVkZCAqKgpyuRzNmjUzSP1ERESGMn36dOzfv1/sMkrN6EIIAAwcOBAAsHTpUty/f1+7PTU1FZ999hny8/MxZswYyGQyuLm5oUOHDoiPj0dwcLB2AqpKpcK8efOQmZmJQYMGvdnzPAT1mzk2EZGJe/z4sdglvBajXB0zevRonD17FqdOncL7778PHx8fSKVSREVFISsrC926dUNAQIC2/9y5c3HlyhVs2bIFkZGR8PT0xOXLl5GYmAhvb29MnjxZxE9jBCRmwNVfgcyi75VSLmzsgfofGHZMIqISmjdvHuLj47F582bttoULF0KpVGL58uVF7rd371788MMPqFq1Ki5duoQvv/wS3bp1w/r16/Hrr78iIyMDjRo1whdffAF3d3cABVMDZs2ahR9++AHp6elo3rw5Fi5cCCcnJwDA0aNHsW7dOty9excODg4YPHgwhg8fDjMzMwQGBiIrKwuxsbF4/PgxPD09ce7cOURHR+PKlSvYsGFD+X5R5cAoQ4hUKsW3336L7du3Y9++fTh//jzMzMzg6ekJf39/9O/fX2dJrpubG3bv3o21a9ciIiIC4eHhcHV1xYQJEzBu3LhiPU7Y5GWmAsoksasgIjI6/fv3x8CBA5GUlAQnJyeoVCocOnQIa9aseeW+V65cwdKlS7Fhwwao1WqsWrUKp0+fxtatW+Ho6IjvvvsOo0ePxm+//QYrKysAwP79+xEaGoqqVati9uzZmD59Onbs2IHTp0/j448/xvLly9G1a1fExMRg4sSJAICRI0cCAE6ePImdO3fC2dkZlStXxrBhw9C8eXNMmTKl3L6f8mSUIQQouC3s8OHDMXz48GL1d3JyQlBQUDlXRUREpqZhw4aoW7cuDh48iDFjxiAiIgK2trZo0aLFK/e1tLRE7969YWZmBkEQ8NNPP+Hrr79GzZo1AQCTJk3Czz//jIiICHTr1g0AMG3aNG377Nmz0b17d8THx2Pv3r3o1KkTevbsCQDw9vZGQEAAQkNDtSGkcePGRT6mpCIy2hBCRERkKH379sX+/fsxZswY7N27Fx9++GGx7tLq4OCgvWfGo0ePkJWVhWnTpuncRyMvLw8JCQna15pLMwDg6uoKoOB2EmlpaXj77bd13r9GjRo6+2puS2EqGEKIiOiN17t3b6xcuRLR0dH4888/MW/evGLt93xQqVatGqysrLB582Y0btxYu/327dvaOR8AkJSUpD2bER8fD6AgjLi5ueksxgAKbknx/H2uTO329Ua5OoaIiMiQqlevDj8/PyxcuBA+Pj7aMxQlYWZmhv79++Orr77Cw4cPoVarsW/fPrz//vu4d++ett8333yDlJQUPH36FMuWLUPbtm3h5OSEfv364fjx4zh8+DDy8/Nx9epVfPfdd+jXr1+RY0qlUmRkZJTqMxsDhhAiIiIUXJK5evXqS3/ov8qcOXPQqFEjDBkyBD4+Pti6dSu+/vpr7eNGgIK5HkOGDEHHjh1RuXJlrFixAgDQqFEjrFmzBt999x18fHwwefJkDB48GBMmTChyvD59+mDPnj0YMmRIqWsWk0R42ZPd3lBKpRLNmjXD+fPnTef+Imc3G351jK0T4DvasGMSUYWXk5ODO3fuoHbt2q/1cLSSun79OoYNG4ZTp05pV7KUNS8vL2zbtq1Yk16N2cuOUUl+hnJOCBERvdGUSiUSExOxevVq9O3bt9wCCBXGEEJERG+0hw8fYuDAgahXr572vhyXLl3CiBEjitzH1dUVhw4dMlSJJoshhIiI3mgeHh6Ijo7W2dawYcNC28pCTExMmb9nRcaJqURERCQKhhAiIiISBUMIERERiYIhhIiIiETBEEJERESiYAghIqIKQ23A+2sacqw3FZfoEhFRhWEmkeDw5Qd4lKkq13HsbKTo0cClXMd4Hfn5+UhMTETNmjXFLuW1MIQQEVGF8ihTheSMXLHL0Ktjx45ISUmBhUXBj1dBEGBra4tevXph1qxZMDMr3QWIxMREvPfeezh06BBcXV0xffp0eHp6YsqUKYXaKhKGECIiojK0YMEC9O3bV/s6JiYGI0eOhLW1NaZOnVqq93R1ddW5edrjx4+LbKtIOCeEiIioHHl5ecHX1xdXr15FTk4Oli9fDj8/P/j6+mLYsGG4dOmStu+OHTvQuXNn+Pj4oFevXti1axcAID4+Hl5eXoiPj8fnn3+Oc+fOYePGjZgwYYJO25o1azBo0CCd8YODgxEQEAAASE1NxcyZM/Huu++iTZs2mDdvHpRKpeG+jBcwhBAREZWTvLw8REVF4fTp03j33Xcxf/58nDp1Ctu2bcOff/6Jzp07Y+TIkUhMTERcXByWLFmCb7/9FufOncPs2bOxaNEiJCcn67zn4sWL4ePjg/Hjx2PDhg06bf3798fFixdx9+5dAAVzR3799Vf0798farUaEydOhJmZGf744w8cOHAAycnJmDdvnqG+jkIYQoiIiMrQggUL4OPjAx8fH7Rq1QqLFi3CqFGj4O/vj4MHD2LGjBlwd3eHVCrFiBEjUKdOHRw8eBDm5uYQBAE//fQTzp8/j1atWuG///0vHB0diz22m5sbWrdujf379wMATp06hfz8fHTo0AH//PMPrly5gi+//BK2traoVq0a5syZg0OHDulc3jEkzgkhIiIqQ19++aXOnBCN5ORk5OXloUaNGjrba9Sogfj4eLi6uiI0NBSbNm3ChAkTkJ+fj759+2LWrFklGt/f3x/Lly/HtGnTsG/fPvTu3RuWlpaIj49Hfn4+/Pz8dPpLpVLExcWhWrVqJf+wr4khhIiIyADs7e1hZWWFuLg41K1bV7v9/v376NixI9LS0pCfn49vvvkGarUaFy5cwNSpU1G7du1CweFlOnXqhAULFuDEiRM4fvw49u3bBwBwdnaGTCZDVFQUzM3NAQAqlQpxcXFwd3cv2w9bTAwhRERUodjZSCvkGGZmZujXrx9WrlyJ2rVrw8XFBT/++CNu3ryJr776ComJiRg9ejQ2btyIVq1awcnJCQD0nqGQSqXIyMjQO46lpSX69OmDBQsWwNvbWxt4GjZsCHd3dyxduhQff/wxzM3NsXTpUhw7dgxHjx7VLis2JIYQIiKqMNSCYLCbiKkFAWYSSZm+5+zZs7F27VqMHDkST548gZeXF/7zn/+gdu3aAIB58+Zh/vz5SE5ORqVKlTBkyBD06NEDCQkJOu/Tp08fzJ8/H//88w+WL19eaBx/f39s3rwZkyZN0m6zsLDAxo0bsWzZMnTt2hW5ublo2LAhtmzZAisrqzL9nMUlEQTel/ZFSqUSzZo1w/nz52Frayt2OWXj7GZAmWTYMW2dAN/Rhh2TiCq8nJwc3LlzB7Vr14ZMJhO7HNLjZceoJD9DuTqGiIiIRMEQQkRERKJgCCEiIiJRMIQQERGRKBhCiIiISBQMIURERCQKhhAiIiISBUMIERERiYIhhIiIKg5BbZpjlbF79+6JXUKx8LbtRERUcUjMgKu/Apmp5TuOjT1Q/4MS7+bl5QU/Pz9s3LgRkudu+b53716EhITg+PHjZVmlXsuWLcPjx4+xdOlSAECTJk3w3XffwcfHp9zHLimGECIiqlgyUw3/GIoSiIyMxKZNmzBu3DhRxn/8+LHO6+joaFHqKA5ejiEiIipDw4YNw5o1a3DhwoUi+9y/fx8TJkxAixYt0KFDB6xatQoqlUrbfujQIXTr1g0+Pj4YM2YM5s6di8DAQAAFz2b54osv0LVrVzRu3Bht27bFhg0bAADffPMNDhw4gAMHDuCDDwrO5Hh5eSEqKgq7d+9Gu3btoFb/7zLTjh078N5772nfd+HChfDz80OrVq0wffp0pKaW7xknhhAiIqIy1KVLFwwcOBCffPIJnjx5Uqg9KysLI0eOhKenJ06cOIEdO3bgr7/+wtq1awEUnLmYM2cO5syZg9OnT2PQoEHYu3evdv8VK1YgPj4eu3fvRnR0NL744gusWrUK9+7dw6RJk9CrVy/06tULv/76q864PXv2hFKpxN9//63dtm/fPvTv3x8A8Nlnn+HevXvYu3cvjh49CltbW0yePBnl+ZxbhhAiIqIyNmfOHNjZ2SEwMLDQD/GIiAioVCp88sknsLKygouLC6ZNm4bt27cDAPbs2YOuXbuiY8eOsLCwQJcuXdC5c2ft/lOmTMHq1atha2uLhw8fwsrKCgCQnJz80prkcjnef/997N+/HwBw69YtXLt2Db1790ZaWhr++OMPfP7556hevTpsbGzw2Wef4fLly7hy5UoZfjO6OCeEiIiojEmlUqxevRoffvghNm/ejGrVqmnbEhIS8OjRI/j6+mq3CYKAvLw8pKWl4cGDB6hfv77O+9WsWVN7aSQtLQ2LFy/G1atXUaNGDbzzzjsAoHOZpSj+/v4YPnw4MjMzsXfvXnTs2BF2dna4dOkSAGDAgAE6/c3NzREfH68do6wxhBAREZWDWrVqYdGiRZg9ezb69u2r3e7s7IxatWrh999/125TKpVIS0uDnZ0d3NzckJiYqPNeiYmJkEqlAIBp06ahY8eO+M9//gMLCws8fvwYP//8c7FqatCgAdzd3REWFoYDBw4gKCgIAODk5AQAOHz4MBwcHLT9b968iZo1a5buCygGXo4hIiIqJz179kS/fv2wc+dO7bYOHTogMzMTmzZtgkqlwtOnTzFnzhxMnz4dEokE/v7+CAsLw8mTJ5Gfn4/IyEgcOXJEu39GRgZkMhnMzc3x6NEjbZDIy8sDUHAWJiMjo8ia/P398fXXX8PMzAxt2rQBUBBC2rdvj8WLF+Px48fIy8vD+vXr0b9/fzx9+rQ8vhoADCFERFTR2NgDtk7l+8vGvszK/eyzz/D2229rX9va2mLr1q2IiopCu3bt0LlzZ5iZmWH9+vUACs5WLFiwAPPnz4evry+2b9+OVq1awdLSEgCwZMkS/Pbbb2jatCn69u0LJycn1K9fHzdu3ABQEHwuXLiA9u3b662nV69eSEtLQ9++fWFm9r8YsHz5clSuXBl9+vRBy5YttUuNnz8zUtYkQnlOey1DKpUK/fr1w40bN3DkyBG4u7vrtKempmLdunU4efIkkpKS4ODggO7du2PixImwsbEp0VhKpRLNmjXD+fPnYWtrW5YfQzxnNxt+Xb2tE+A72rBjElGFl5OTgzt37qB27dqQyWS6jYK64IZlhmDIsZ5z584dqNVq1K1bV7ttypQpqFOnDqZPn27wevR52TEqyc/QCnMmZOXKldqU96Lk5GQMGDAA27dvh0wmQ/v27aFWq7Fp0yYMHjwYSqXSwNUSEVG5MGQoECGAAAXzMEaMGIH79+8DAKKionDy5En4+fmJUk95qhATU0+fPo2tW7cW2R4UFISEhAQEBARgxowZAArOnMyePRuHDx9GSEiI9iYvRERExqxLly64efMmhg8fjvT0dLi5uWHRokVo2rSp2KWVOaM/E/L06VMEBgbC3d1d73Wp+/fvIywsDC4uLpg6dap2u1QqxaJFi2BjY4OdO3ciJyfHkGUTERGV2kcffYSIiAhER0fj4MGD6NWrl9gllQujDyELFixAcnIyli9frl2e9LwTJ05ArVbDz89PO2lHo1KlSmjZsiWysrIQFRVlqJKJiIioGIw6hBw8eBAHDx5EQEAAGjVqpLePZp6IQqHQ2+7h4aHTj4iIiIyD0c4JefDgARYsWID69etj0qRJRfZLSUkBgCKXEGm2v+whPCqVSufBQZzISkQkvuLcAZTEUVbHxihDiCAImDNnDnJycrB8+fJCl1mel5WVBQCFl3H9P812TT99Nm7ciJCQkNeomIiIyopUKoWZmRkSExPh4OAAqVQKiUQidlmEgp/PKpUKKSkpMDMz0ztNoiSMMoRs2bIFUVFRmDNnDjw9PV/a19zcHACK/AOquQ3Ky26HMn78eIwaNUr7WqlUmuRSKCKiisDMzAy1a9fGgwcPCt2+nIyDXC5HrVq1dG52VhpGF0JiYmKwatUq+Pr6YuTIka/sL5fLAQC5ubl62zXbra2ti3wPqVT62mmOiIjKjlQqRa1atfDs2TPk5+eLXQ49x9zcHBYWFmVydsroQsjKlSuhUqkgkUgwe/ZsnbbHjx8DAJYtWwa5XI6PPvoIjo6OAP43N+RFr5ozQkRExkkikcDS0vKll+SpYjO6EKKZu3HmzJki+xw7dgxAwUN4NKtibt26pbdvbGwsAMDLy6ssyyQiIqLXZHQhJDQ0tMi2jh07IiEhQefZMTVq1AAAhIeH49NPP9XOEQEKnjQYFRUFuVyOZs2alW/hREREVCJGfZ+Q4nBzc0OHDh0QHx+P4OBg7QRUlUqFefPmITMzE4MGDTKdB9ERERGZCKM7E1Iac+fOxZUrV7BlyxZERkbC09MTly9fRmJiIry9vTF58mSxSyQiIqIXVPgzIUDB2ZDdu3fD398fGRkZCA8Ph1QqxYQJE7Bt2zbY2NiIXSIRERG9oEKdCTl+/HiRbU5OTggKCjJgNURERPQ6TOJMCBEREVU8DCFEREQkCoYQorIkiPTALbHGJSJ6DRVqTgiR0ZOYAVd/BTKLfmpzmbOxB+p/YLjxiIjKCEMIUVnLTAWUSWJXQURk9Hg5hoiIiETBEEJERESiYAghIiIiUTCEEBERkSgYQoiIiEgUDCFEREQkCoYQIiIiEgVDCBEREYmCIYSIiIhEwRBCREREomAIISIiIlEwhBAREZEoGEKIiIhIFAwhREREJAqGECIiIhIFQwgRERGJgiGEiIiIRMEQQkRERKJgCCEiIiJRMIQQERGRKBhCiIiISBQMIYYkqMWugIiIyGhYiF3AG0ViBlz9FchMNdyY1esCdfwMNx4REVExMYQYWmYqoEwy3Hjy6oYbi4iIqAR4OYaIiIhEwRBCREREomAIISIiIlEwhBAREZEoGEKIiIhIFAwhREREJAqGECIiIhIFQwgRERGJgiGEiIiIRMEQQuVHaiPe83L4nB4iIqPH27ZT+bGQifO8HBt7oP4HhhuPiIhKhSGEyp+hn5dDREQVAi/HEBERkSiM9kxIXl4eQkNDsW/fPty9exdyuRwNGjTAiBEj0LZt20L9U1NTsW7dOpw8eRJJSUlwcHBA9+7dMXHiRNjY2IjwCYiIiOhljPJMiCAImD59OpYtW4aHDx+idevWePvtt3H69GmMHTsW69ev1+mfnJyMAQMGYPv27ZDJZGjfvj3UajU2bdqEwYMHQ6lUivRJiIiIqChGGUJ++uknhIWF4e2338aRI0ewceNGbN26Fbt374atrS3WrFmDW7duafsHBQUhISEBAQEBOHDgAL7++mv88ccf6NGjB2JiYhASEiLipyEiIiJ9jDKE/PLLLwCAwMBAVKtWTbu9Xr166NWrFwRBwIkTJwAA9+/fR1hYGFxcXDB16lRtX6lUikWLFsHGxgY7d+5ETk6OYT8EERERvZRRhpDvv/8ev/zyC3x9fQu1ZWVlAQDMzc0BACdOnIBarYafnx8sLS11+laqVAktW7ZEVlYWoqKiyr9wIiIiKjajDCFWVlaoV6+eNmhoHD16FL///jusra3RtWtXAMCNGzcAAAqFQu97eXh46PQjIiIi42C0q2M00tPT8cUXX+DmzZu4ffs2XFxcsGTJEjg7OwMAUlJSAAAODg5699dsT0014M2yiIiI6JUMciYkIyOj1PvGxcXhyJEjuH37NgBAIpHg5s2b2nbN5RmZTKZ3f812TT99VCoVlEqlzi8iIiIqX6UOIZ06dcKyZcte2W/WrFno0aNHaYdB7dq1cebMGURFRWHVqlVQqVQICgrSLtPVXLKRSCR69xcEQed3fTZu3IhmzZppf/n5+ZW6XiIiIiqeUoeQhIQEpKWlvbLf/fv38fTp09IOAxsbG1SpUgVVq1ZFz549sXbtWkgkEnz77bfIzMyEXC4HAOTm5urdX7Pd2tq6yDHGjx+P8+fPa39FRkaWul4iIiIqnmLPCRk9erT2kohGWFgY2rdvX+Q+WVlZyMjIQN26dUtd4IuaNm2KWrVq4d69e7h79y4cHR0B/G9uyIteNWcEKFjOK5VKy6xGIiIierUShZCxY8dqX0skEmRnZyM7O/ul+1WuXBlz5swpdkHZ2dlYs2YNUlNTERwcrPcyiyYwPHv2TLsq5vmblz0vNjYWAODl5VXsGoiIiKj8FTuEtGnTBuHh4VCr1RAEAZ07d0aXLl0QGBiot79EIoGVlRXs7OyKnK+hj0wmw759+/DkyRMMGDAAzZs312mPi4vDnTt3IJVK4enpCXt7ewBAeHg4Pv30U51lvRkZGYiKioJcLkezZs2KXQMRERGVvxLNCXFxcYGbmxtq1KiByZMn44MPPoCbm5veX66urqhevXqJAghQEF4GDhwIAJg/fz6Sk5O1bQ8fPsQnn3yCZ8+eYfDgwZDL5XBzc0OHDh0QHx+P4OBg7QRUlUqFefPmITMzE4MGDYKtrW2J6iAiIqLyVer7hEyePLks69AxceJEXLhwAWfPnkW3bt3QrFkz5OXl4dKlS8jKykKbNm0wc+ZMbf+5c+fiypUr2LJlCyIjI+Hp6YnLly8jMTER3t7e5VorERERlc5r3axMqVTil19+QWxsLHJycqBWq/X2k0gkxVrOqyGTybBlyxZs27YNv/zyC6KiomBhYQFPT0/07dsX/v7+Opdd3NzcsHv3bqxduxYREREIDw+Hq6srJkyYgHHjxsHGxuZ1PiYRERGVg1KHkAcPHmDIkCF4+PDhS+/BAZQ8hACApaUlxowZgzFjxhSrv5OTE4KCgko0BhEREYmn1CHk66+/xoMHD+Du7o4PPvgAjo6OsLAw+rvAExERkZEodWo4ceIEqlWrhl27dqFy5cplWRMRERG9AUp9x9SMjAz4+voygBAREVGplDqEuLu76yyfJSIiIiqJUoeQ/v374+LFizhz5kxZ1kNERERviFLPCfnwww9x7tw5jB8/HoMGDUKjRo1QpUqVIvu3atWqtEMRERGRCSp1CGnevDkkEgkEQcDWrVtf2lcikeDq1aulHYqIiIhMUKlDiK+vb1nWQURERG+YUoeQ0NDQsqyDiIiI3jClnphKRERE9DpKfSYkMTGxRP1dXV1LOxQRERGZoFKHkI4dO0IikRSrLyemEhER0YtKHUKKOrOhVquRnp6O7OxsAICPjw/s7OxKOwwRERGZqFKHkOPHj7+0/fr161iwYAGSkpKwdu3a0g5DREREJqrcJqbWq1cPGzZswOPHj7F69eryGoaIiIgqqHJdHVOlShX4+vri2LFj5TkMERERVUDlvkQ3OzsbGRkZ5T0MERERVTDlGkLCw8Nx5swZ1KpVqzyHISIiogqo1BNThw4dWmRbfn4+Hj16hLi4OADAgAEDSjsMERERmahSh5Dz58+/so9UKsXQoUMxbNiw0g5DREREJqrUIWTbtm1FtpmZmUEul6N27dqwtrYu7RBERERkwkodQpo3b16WdRCVHakNIKgBCR+NRERkzEodQp4XFxeHM2fOICUlBVKpFNWrV0fz5s3h4uJSFm9PVDIWsoIAcvVXIDPVcONWrwvU8TPceEREFdxrhZD09HTMnTsXYWFhets7duyIoKAgVKtW7XWGISqdzFRAmWS48eTVDTcWEZEJKHUIycnJwciRI3Ht2jVUqlQJbdu2RY0aNSAIAuLi4nDq1CkcO3YMDx48wE8//QSpVFqWdRMREVEFV+oQsnXrVly7dg3t27fHihUrYGtrq9OuVCoxc+ZMREZGYvv27Rg1atRrF0tERESmo9Qz9w4dOoRq1aph5cqVhQIIANja2mLlypWoWrUqDhw48FpFEhERkekpdQi5f/8+fH19IZfLi+wjl8vh4+ODu3fvlnYYIiIiMlGlDiEWFhbIysp6Zb/s7GxIJJLSDkNEREQmqtQhxMvLC2fPnkV8fHyRfeLj43H27FnUq1evtMMQERGRiSp1CBk4cCByc3MxZswYnD17tlD7uXPnMGbMGKhUKvj7+79WkURERGR6Sr06pnfv3jhx4gQOHTqE4cOHo1q1anBzc4NEIkF8fDweP34MQRDQs2dP9OnTpwxLJiIiIlPwWjcrW7FiBRo1aoTvv/8eCQkJePTokbbN1dUVI0eO5MPriIiISK/XCiESiQTDhw/H8OHD8fDhQyQnJyMvLw+urq68ZTsRERG9VInnhKhUKmzfvh3bt2/X2e7s7IyGDRtCqVSif//+WLt2LbKzs8usUCIiIjItJQohaWlp6NevH4KCgvD777/r7XP69GmkpaVh3bp16NevHx4+fFgmhRIREZFpKXYIUalUGDlyJGJjY1GrVi307dtXb79JkyZh0aJFqFGjBm7fvo3x48fj2bNnZVYwERERmYZih5Cff/4ZsbGxePfdd7F//358+OGHevvZ2trC398fu3fvRuPGjXHjxg3s2bOnzAomIiIi01DsEHL48GFYWVnh3//+N6ytrV/Zv0qVKggODoaZmRkOHTr0WkUSERGR6Sl2CImNjYW3tzecnJyK/eY1a9ZEw4YNERMTU6riiIiIyHQVO4Tk5OTAwcGhxAM4OzsjMzOzxPsRERGRaSt2CHF0dERSUlKJB0hNTX3pk3aJiIjozVTsEFK3bl3ExMQgPT292G+ekZGBf/75B7Vr1y5VcURERGS6ih1CevfujezsbKxbt67Yb75+/Xrk5OSgXbt2JS5MrVZj586dGDhwIJo2bYoGDRqgW7duCA4OxtOnTwv1T01NxcKFC9GlSxc0bNgQnTp1QnBwMC8FERERGalih5DOnTvDw8MD27Ztw5o1a6BSqYrsq1KpsHbtWmzevBnVqlXDkCFDSlSUWq3G1KlTMW/ePFy/fh3e3t5o3bo1nj59ik2bNqF///5ITU3V9k9OTsaAAQOwfft2yGQytG/fHmq1Gps2bcLgwYOhVCpLND4RERGVv2I/O0YqlWL16tUYMGAANmzYgD179qBz585o2LAh7O3tkZ+fj7S0NFy8eBERERFITk6GTCbDhg0bUK1atRIVtWfPHoSFheGtt97Cpk2bULNmTQCAUqnEzJkzER4ejqCgIKxevRoAEBQUhISEBAQEBGDGjBkACoLQ7NmzcfjwYYSEhCAwMLBENRAREVH5KtED7Dw8PLBv3z7MmDED//zzD3788Uf8+OOPOn0EQQAA+Pj4YP78+fDw8ChxUZqbmwUGBmoDCFBwI7R///vfaN26NY4ePYqcnBwkJycjLCwMLi4umDp1qravVCrFokWLcOLECezcuRMff/wxZDJZiWshIiKi8lHip+i6u7tj9+7dOHfuHA4fPozbt28jJSUF5ubmcHBwgLe3Nzp16oSGDRuWuqiqVauiTp06aNy4caE2Ozs7VKlSBU+ePMHjx49x4sQJqNVq+Pn5wdLSUqdvpUqV0LJlSxw7dgxRUVHw8/MrdU1ERERUtkocQjR8fHzg4+NTlrVobdiwoci2uLg4PHnyBJaWlrCzs8ONGzcAAAqFQm9/Dw8PHDt2DDdu3GAIISIiMiIleoquMdDMA2nfvj2srKyQkpICAEXeSE2z/fmJrERERCS+Up8JEUNoaCgOHjwIa2trTJ8+HQCQlZUFAEXO99Bs1/TTR6VS6az24WoaIiKi8ldhQsi2bdvw73//GxKJBIsXL0bdunUBAObm5gAAiUSidz/NRFnN7/ps3LgRISEhZVwxkYFIbQBBDUhEOLEp1rhij01EZcLoQ4ggCFixYgU2bdoEc3NzLF68GO+99562XXNL+NzcXL37a7a/7Mm/48ePx6hRo7SvlUol549QxWEhK/hhfPVXINOAlx2r1wXq+Bl+XACwsQfqf2DYMYmozBl1CMnJycGsWbNw5MgRyGQyfPXVV+jcubNOH0dHRwDQzg150avmjAAFy3mlUmkZVU0kksxUQFny5zuVmry6OOMSkckw2hCiVCoxduxYREdHo3r16li/fj0aNWpUqJ9mVcytW7f0vk9sbCwAwMvLq/yKJSIiohIzyguqeXl5CAgIQHR0NNzd3bFz5069AQQA2rZtCwAIDw9Hfn6+TltGRgaioqIgl8vRrFmzcq+biIiIis8oQ0hISAjOnz8PBwcHhIaG6tw19UVubm7o0KED4uPjERwcrJ2AqlKpMG/ePGRmZmLQoEGwtbU1VPlERERUDEZ3OSY9PR3ff/89AKB69eoIDg4usm9gYCDs7e0xd+5cXLlyBVu2bEFkZCQ8PT1x+fJlJCYmwtvbG5MnTzZU+URERFRMRhdCLl68iOzsbADA9evXcf369SL7TpkyBfb29nBzc8Pu3buxdu1aREREIDw8HK6urpgwYQLGjRsHGxsbQ5VPRERExWR0IaRdu3aIiYkp8X5OTk4ICgoqh4qIiIioPBjlnBAiIiIyfQwhREREJAqGECIiIhIFQwgRERGJgiGEiIiIRMEQQkRERKJgCCEiIiJRMIQQERGRKBhCiIiISBQMIURERCQKhhAiIiISBUMIERERiYIhhIiIiETBEEJERESiYAghIiIiUTCEEBERkSgYQoiIiEgUDCFEREQkCoYQIiIiEgVDCBEREYmCIYSIiIhEwRBCREREomAIISIiIlEwhBAREZEoGEKIiIhIFAwhREREJAqGECIiIhIFQwgRERGJgiGEiIiIRMEQQkRERKJgCCEiIiJRMIQQERGRKBhCiIiISBQMIURERCQKhhAiIiISBUMIERERiYIhhIiIiETBEEJERESiYAghIiIiUTCEEBERkSgYQoiIiEgUDCFEREQkCoYQIiIiEkWFCSH79++Hl5cX/vrrL73tqampWLhwIbp06YKGDRuiU6dOCA4ORmZmpoErJSIiouKoECHk0qVLWLRoUZHtycnJGDBgALZv3w6ZTIb27dtDrVZj06ZNGDx4MJRKpQGrJSIiouIw+hBy/PhxjBkz5qVBIigoCAkJCQgICMCBAwfw9ddf448//kCPHj0QExODkJAQA1ZMRERExWG0ISQpKQmffvopJk6ciLy8PNjb2+vtd//+fYSFhcHFxQVTp07VbpdKpVi0aBFsbGywc+dO5OTkGKp0IiIiKgajDSGrVq3C3r174e3tjZ07d6JOnTp6+504cQJqtRp+fn6wtLTUaatUqRJatmyJrKwsREVFGaJsIiIiKiajDSF16tTBsmXLsGvXLnh5eRXZ78aNGwAAhUKht93Dw0OnHxERERkHC7ELKEpAQECx+qWkpAAAHBwc9LZrtqemppZNYURERFQmjDaEFFdWVhYAQCaT6W3XbNf000elUkGlUmlfm+RqGnl1w48pqyLO2JpxiYjIqFX4EGJubg4AkEgketsFQdD5XZ+NGzea7goaS2uoBQFm3r1FGV6ssdWCADOpjcHHJSKi4qvwIUQulwMAcnNz9bZrtltbWxf5HuPHj8eoUaO0r5VKJfz8/MqwShGZS2EmkeDwidN4lJpk0KHfqqvAu43exuG/LuDRwziDjWvnXBM9WjcFLPSfHSMiIuNQ4UOIo6MjgP/NDXnRq+aMAAXLeaVSadkXZ0QepT9FclqaQces5pT9/2MrDTu2dTXDjUVERKVmtKtjikuzKubWrVt622NjYwHgpStsiIiIyPAqfAhp27YtACA8PBz5+fk6bRkZGYiKioJcLkezZs3EKI+IiIiKUOFDiJubGzp06ID4+HgEBwdrJ6CqVCrMmzcPmZmZGDRoEGxtbUWulIiIiJ5X4eeEAMDcuXNx5coVbNmyBZGRkfD09MTly5eRmJgIb29vTJ48WewSiYiI6AUV/kwIUHA2ZPfu3fD390dGRgbCw8MhlUoxYcIEbNu2DTY2XKpJRERkbCrMmZDQ0NCXtjs5OSEoKMhA1RAREdHrMokzIURERFTxMIQQERGRKBhCiIiISBQMIURU8UhtAEEtzthijUtkgirMxFQiIi0LGSAxA67+CmSmGm5cG3ug/geGG4/IxDGEEFHFlZkKKA37YEYiKju8HENERESiYAghIiIiUTCEEBERkSgYQoiIiourcojKFCemEhEVF1flEJUphhAiopLiqhyiMsHLMURERCQKhhAiIiISBUMIERERiYIhhIiIiETBEEJERESiYAghIiIiUTCEEBERkSgYQoiIiEgUDCFEREQkCoYQIiIiEgVDCBEREYmCIYSIiIhEwRBCREREomAIISIiIlFYiF3AG0de3bDjSW0NOx4Z/hjLqhh2PCKiMsIQYkBqQYCZd29xBjfnoS53ltaiHWO1IMBMamPwcclApDaAoAYkIpy8FmtceiPwJ5MBmUkkOHziNB6lJhlszLfqKvBuo7cBCQ91uTOXinKM7ZxrokfrpoCFzGBjkoFZyAqCwNVfgcxUw41rYw/U/8Bw49Ebhz+ZDOxR+lMkp6UZbLxqTtkGG4sKGPoYw7qa4cYicWWmAkrDBVyi8sZzbERERCQKhhAiIiISBS/HEJkKWRXA1smw4xERvQaGEKIKTi6zKlgdU7c9ULe9QcfmqhwqL2pBgJlE8saN/aZhCCGq4KyklgWrcv66gEcP4ww2LlflUHkyk0hw+PIDPMpUGXRcOxspejRwMeiYbzKGECIT8ShdyVU5ZFIeZaqQnJErdhlUjjgxlYiIiETBEEJERESi4OUYMl2GXi3ypj6nx9Dfs2ZMIqrwGELI5Ii5WgTAG/OcHrG/Z67MMQAbB64UMaQ38Dk9b8bflvRGEWu1yJv2nB6xvmeAK3MMxqrS/45xmuGeWfNWrZoF/y+J6XYkkHbLcOO9oc/peTP+tqQ3kqFXi7ypz+kx+KocgCtzDOxRWiqSH8YbbLxqVSoZbKwiZT/hc3oM4M0670NERERGw+TOhJw5cwYbNmzAtWvXkJOTAy8vL4wYMQI9evQQuzQiIiJ6jkmFkAMHDmDWrFmwsLBAixYtYG5ujr///hsff/wxbt26hcmTJ4tdIhEREf0/kwkhaWlp+OKLL2BtbY1t27ahQYMGAIBbt25h+PDhCAkJQefOnVGvXj2RKyUiopcyMxe7AsOT2oi3OkbEVTkmE0K2b9+OnJwcjBs3ThtAAKBu3br45JNP8Nlnn+H777/HkiVLRKySiIheSbPC7Gki8OC+Ycd2qQXA3bBjAgUrvSRmwNVfgUzDrUQSe1WOyYSQiIgIAECXLl0KtXXq1AkSiQSRkZEGroqIiEotPw9QZRp+TDFlpr5Rq3JMZnXMzZs3AQAeHh6F2qpWrQp7e3ukpaUhzdBLCYmIiEgvkwgh6enpyM3NhY2NDWxs9N9B0dHREQCQkpJiyNKIiIioCCZxOSYrKwsAYG1tXWQfKysrnb7PU6lUUKlU2tcZGRkAAKVSWZZlAgDkcjmqVK1e5u9bFKm5OZRKJeQyqUHHFXNsjmva4wKAXCYt+P/Twg6wrWO4gS3sAKUSkLkCMOAt48UaV2ILKJVv1N9bb9yfLVmVgnHLkOZnpyAIr+xrEiHEzKzghI7kJc830HwZ+r6UjRs3IiQkpNB2Pz+/MqqQiMpaoNgFkMnin62ykZmZiUqVXn73W5MIIZpLMDk5OUX20ZzpkMvlhdrGjx+PUaNGaV+r1Wqkp6ejatWqLw02VDaUSiX8/PwQGRkJW9s39Em0JoTH03TwWJoOQx5LQRCQmZmpnQbxMiYTQuRyOTIyMpCTkwOZrPBDrZKTkwEADg4OhdqkUimkUqnOtsqVK5dPsVQkW1tb/kVnQng8TQePpekw1LF81RkQDZOYmCqRSKBQKAAU3JzsRU+ePEFqairs7Oxgb29v6PKIiIhID5MIIQDQtm1bAMDRo0cLtR09ehSCIHCOBxERkRExmRDSr18/WFtbY+vWrbhw4YJ2++3bt7F69WpIJBKdeR9kPKRSKSZPnlzokhhVTDyepoPH0nQY67GUCMVZQ1NB/Pzzz5g7dy7Mzc3RokULSKVS/P3338jNzcWMGTMQEBAgdolERET0/0wqhADAiRMn8N133+Gff/6Bubk5PDw8MHr0aHTt2lXs0oiIiOg5JhdCiIiIqGIwmTkhREREVLGYxH1CSDz79+/HnDlzsGXLFrRu3bpQe2pqKtatW4eTJ08iKSkJDg4O6N69OyZOnKj3OT9qtRp79+7Fjh07cPfuXVhaWqJZs2aYNGkSvL299dZw7do1hISE4OLFi1AqlXjrrbcwcOBADBo0iDebewm1Wo1du3Zh7969iI2NRV5eHlxdXdG5c2eMHz++0L1yeCyNW15eHkJDQ7Fv3z7cvXsXcrkcDRo0wIgRI7SrB5/H41kxqFQq9OvXDzdu3MCRI0fg7u6u017RjyMvx1CpXbp0CaNGjYJSqdQbQpKTkzFo0CAkJCRAoVCgdu3auHz5MhITE+Hl5YUdO3YUumnOvHnzsHPnTlSpUgXNmzdHamoqoqOjYWlpiW+//bbQGFFRURg7dizy8vLg6+uLSpUq4fTp08jMzETfvn2xZMmScv8eKiK1Wo2pU6ciLCwMMpkMDRs2hFwux6VLl/Do0SO4u7tjx44d2vvq8FgaN0EQMGXKFISFhaFy5cpo2rQpcnNzce7cOeTl5eHjjz/GRx99pO3P41lxLF26FFu2bAGAQiHEJI6jQFQKx44dE3x8fASFQiEoFArhzz//LNRnypQpgkKhEFasWKHdlpubK0ybNk1QKBTCkiVLdPofP35cUCgUwnvvvSekpaVpt//+++/C22+/LbRt21bIycnRea82bdoI9erVE8LDw7Xbk5KShO7duwsKhUI4duxYGX5q0/Hzzz8LCoVC6Nq1q3D//n3t9oyMDGH8+PGCQqEQpk2bpt3OY2ncduzYISgUCqF3797Co0ePtNuvXbsmNG3aVPDy8hJu3ryp3c7jWTH8/fffgpeXl/bv2bt37+q0m8JxZAihEnn48KEQGBgoeHl5CY0aNRJat26tN4Tcu3dPqFevnuDn5yeoVCqdtqdPnwpNmjQRGjduLGRnZ2u3Dx06VFAoFEJkZGShcWfPni0oFAph37592m27d+8WFAqF8PHHHxfq//fffwsKhUIYNmzYa35i0zRw4EBBoVAIx48fL9SWlpYmeHl5Cd7e3kJ2djaPZQWgOZ5///13obYvv/xSUCgUwubNmwVB4P+bFUV6errg5+cndO3aVXj33XcLhRBTOY6cmEolsmrVKuzduxfe3t7YuXMn6tTR/6jrEydOQK1Ww8/PD5aWljptlSpVQsuWLZGVlYWoqCgABQ9XOn/+PORyud65JV26dAEAREREaLdFRkbqtD2vefPmqFKlCs6dO4fMzMxSfVZTVrVqVdSpUweNGzcu1GZnZ4cqVaogLy8Pjx8/5rGsAL7//nv88ssv8PX1LdSWlZUFADA3NwfA/zcrigULFiA5ORnLly/Xe4MxUzmODCFUInXq1MGyZcuwa9cueHl5Fdnvxo0bAKB9ps+LPDw8dPrdvHkTarUaderUgYVF4fnSdevW1en//H97enoW6m9mZoY6deogPz9f7/OE3nQbNmzA4cOHUa1atUJtcXFxePLkCSwtLWFnZ8djWQFYWVmhXr162qChcfToUfz++++wtrbW3iuJx9P4HTx4EAcPHkRAQAAaNWqkt4+pHEeujqESKe5dZ1NSUgDof2rx89tTU1NL1b8k+2j6UfGsXr0aANC+fXtYWVnxWFYw6enp+OKLL3Dz5k3cvn0bLi4uWLJkCZydnQHw/01j9+DBAyxYsAD169fHpEmTiuxnKseRZ0KoXGhOActkMr3tmu2afprTedbW1sXq//x/F7WPlZVVoX3o5UJDQ3Hw4EFYW1tj+vTpAHgsK5q4uDgcOXIEt2/fBlDwlPGbN29q23k8jZcgCJgzZw5ycnKwfPnyQpdZnmcqx5EhhMqF5rRwUWvIhf9fGa75/VX9X9yvNGPQy23btg2LFy+GRCLB4sWLtadneSwrltq1a+PMmTOIiorCqlWroFKpEBQUhPXr1wPg8TRmW7ZsQVRUFKZPn673EsjzTOU4MoRQuZDL5QCA3Nxcve2a7ZqEremfk5Ojt79m+/OJ/FX7qFQqnX6knyAICA4OxuLFi2FmZoYlS5bgvffe07bzWFYsNjY2qFKlCqpWrYqePXti7dq1kEgk+Pbbb5GZmcnjaaRiYmKwatUq+Pr6YuTIka/sbyrHkXNCqFw4OjoCKPpa4YvXGjX9n78e+bL+mn3S09ORkpJS6O6eRe1DunJycjBr1iwcOXIEMpkMX331FTp37qzTh8eyYmvatClq1aqFe/fu4e7duzyeRmrlypVQqVSQSCSYPXu2Ttvjx48BAMuWLYNcLsdHH31kMseRIYTKhWbGdlGzpmNjYwFAu8LGw8MDZmZmuH37NtRqNczMdE/Saa5pPz8TXKFQIDY2Frdu3dJeOtBQq9W4ffs2zM3NC7VRAaVSibFjxyI6OhrVq1fH+vXr9c7E57E0btnZ2VizZg1SU1MRHBys99S5Zonns2fPeDyNlGZexZkzZ4rsc+zYMQCAv7+/yRxHXo6hcqF5VkV4eDjy8/N12jIyMhAVFQW5XI5mzZoBKDgF6Ovrq217UVhYGADAz89Pu61du3YACpYhvigqKgrp6elo1qxZodsWU8FzRgICAhAdHQ13d3fs3LmzyKWAPJbGTSaTYd++fThw4ADOnj1bqD0uLg537tyBVCqFp6cnj6eRCg0NRUxMjN5fbm5uAApu2x4TE4MWLVqYzHFkCKFy4ebmhg4dOiA+Ph7BwcHaiUsqlQrz5s1DZmYmBg0apPOHd+jQoQCARYsW6ZxiPHLkCA4ePAhHR0e8//772u1dunSBg4MDDh48iCNHjmi3p6SkYNGiRQCA0aNHl+vnrKhCQkJw/vx5ODg4IDQ0FDVr1iyyL4+lcZNIJBg4cCAAYP78+UhOTta2PXz4EJ988gmePXuGwYMHQy6X83iaCFM5jnyAHb2WYcOG4cyZM3ofYJeQkIBBgwYhOTkZderUgaenp/bhSt7e3ggNDS30lMeZM2fiwIEDsLW1RcuWLfH48WNcuHABlpaW2LRpE1q0aKHTPzIyEpMmTcKzZ8/QtGlTVKtWDadPn4ZSqcTAgQOxcOHCcv8OKpr09HT4+fkhOzsb9erVe+ks/MDAQNjb2/NYGrmcnByMHTsWZ8+e1f7rNy8vD5cuXUJWVhbatGmD9evXay/L8HhWLB07dkRCQkKhB9iZwnFkCKHX8rIQAgBJSUlYu3YtIiIikJ6eDldXV3Tv3h3jxo3TewovPz8fO3bswM8//4x79+6hcuXKaNiwIaZMmYK3335bbw0XL17EN998g+joaDx79gy1a9fG4MGD0a9fv0LXPangds/jxo0rVt/n/9LjsTRueXl52LZtG3755RfcuXMHFhYW8PT0RN++feHv71/obqo8nhVHUSEEqPjHkSGEiIiIRMEoSkRERKJgCCEiIiJRMIQQERGRKBhCiIiISBQMIURERCQKhhAiIiISBUMIERERiYIhhIiMwpt4y6I38TMTPY8hhIhEd+rUqTJ5lkjHjh3h5eWFe/fulUFV5Sc/Px/bt2/H4sWLdbbv3bsXXl5emDlzpkiVERkWQwgRiSoxMRFjxowp8pHkpujAgQNYuHAhnjx5InYpRKJiCCEiUanVarFLMLg38TMT6cMQQkRERKJgCCGqgNauXQsvLy/89ttvmDt3Lpo0aQJfX1+sWLECAPD06VOsXLkS3bt3R4MGDdCiRQuMHz8e586dK/RegYGB8PLywuXLl7F9+3Z069YNDRs2ROfOnbFy5UoolUq9NVy4cAGTJk1Cy5Yt8c4776BDhw748ssv8eDBg0J9O3bsCB8fH9y4cQN9+/bV9h89ejQ6deoEoOBpoF5eXujYsWMZflMF8vPz8eOPP8Lf3x9NmjRBkyZNMHDgQOzbt6/Q5FDNvIytW7fi4sWLGDt2LHx8fNCkSRMMGTIEx48f1zvGjRs3MG3aNLRp0waNGzfG4MGDcerUKaxbtw5eXl7Yu3cvgIInT3/66acACi7LeHl5ITAwsND7acZu1qyZduyIiIiy/WKIRMYQQlSBrVmzBvv370fLli3h4uICDw8PJCYmom/fvti4cSOys7PRpk0beHp64uTJkxg2bBh27dql972++eYbLFy4EFZWVmjfvj2ys7OxceNGDB06FOnp6Tp9t2/fjqFDh+Lo0aOoVasWOnbsCEtLS/z000/o06cPLl26VOj98/LyEBAQgPT0dPj5+UEikaBPnz7o3LkzAMDa2hq9evXSvi4reXl5mDBhAubPn4/bt2+jSZMmaN68OW7cuIHAwEBtIHjR6dOnMWTIENy8eRMtWrRArVq1cP78eXz00Uf4/fffdfqeO3cOAwcOxO+//w5HR0e0a9cOCQkJGDduXKHQ0rp1azRp0gQAUKNGDfTq1Uv7WuO///0vhg4ditu3b6NVq1aoUaMGzp8/jwkTJuDo0aNl+O0QiUwgogrn66+/FhQKhVCvXj0hOjpauz0/P18YMmSIoFAohMWLFwsqlUrb9t///lfw8fERvL29hdjYWO32OXPmCAqFQlAoFMK3336r3a5UKoWRI0cKCoVCWLBggXb71atXhXr16gkNGjQQIiIidMZeu3atoFAohHbt2gnZ2dnatg4dOggKhUL48MMPhZycHG1/QRCEuLg4QaFQCG3btn3t70Uzzt27d7XbVq9eLSgUCuFf//qXkJaWpt2ekpIi9OnTR1AoFMLPP/+s3b5nzx7t97Fo0SKd73DJkiXaz6GRm5srdO7cWVAoFML27du123NycoRp06Zp32vPnj2FxpgxY4ZO/S+OrfmO1Gq1MH/+fEGhUAiDBw9+7e+JyFjwTAhRBda4cWM0btxY+/ry5cs4d+6c9hS/paWltq1Ro0aYMGEC8vLysG3btkLv9e6772LcuHHa1zY2Nli6dCksLCywd+9e5ObmAgC2bdsGtVqNsWPHws/PT9vfzMwMkydPRvPmzfHw4UMcOHCg0BiDBw+GlZWVtn95U6lUCA0NhaWlJVasWAE7Ozttm729PRYuXAgA+M9//lNoXzs7O8yZM0fnOxw+fDgAIDY2VrstMjIS9+/fR7t27TBkyBDtdisrKyxevBhVqlQpcd3Vq1fHnDlztN+RRCLRLmGOiYkp8fsRGSuGEKIKTKFQ6Lw+ffo0AKB58+Z6f8hrQsOZM2cKtb333nuFtjk5OaFhw4bIzs7GxYsXAQBnz54FAPTo0UNvTT179ixyjBfrLW9XrlxBRkYG6tSpAycnp0LtDRo0QPXq1XHnzh2kpKTotL3zzjs6AQQAHB0dARSEG80Kl7/++gsAtHNbnmdjY4O2bduWuG5vb+9CY7u4uAAAlEolV9eQybAQuwAiKr0X/5WtmRQaGhqK0NDQIvd7+PBhoW3u7u56+2p++CUnJ+v87ubmprd/jRo1AKDQD3UAqFy5cpE1lQfN9xETEwMvL69X9nVwcNC+1lerhcX//spUq9UwMzPTjqH5nl7k6upa4rqLOzZRRccQQlSBSSQSndeafyE3aNAAb731VrH3AwBzc3O9fYX/Xz2iade81vcez7dLpdJCbYb+wan5PlxdXdGsWbOX9rWxsdF5XdTne1FeXh6Aom/BXtT2lynu2EQVHUMIkQnR/Ev+3XffxfTp00u0b1JSkt7tiYmJAP73L31HR0fEx8cjPj4enp6ehfrHxcUBKJjXIDbN9+Hs7KxdvlzWnJ2dAUDv0mRA/1knIirA83lEJsTX1xcAcPLkSb3zBo4ePYr3338fCxYsKNQWGRlZaNvDhw9x+fJlVK1aFQ0aNNAZ448//tBbw+HDhwEALVq0KFbN5fmv/gYNGkAmk+H69evay0jPS0pKQo8ePTBq1ChkZmaWagzN59R3D4/c3FztnJHn8UwHUQGGECIT0qJFC9SvXx9XrlzB8uXLoVKptG337t1DUFAQYmNj9V6q2b9/P8LCwrSvlUolZs+ejfz8fAwbNkx7OeZf//oXzM3N8d133+HUqVPa/oIgICQkBGfPnoWTk1Ox7/ehWS2TlZVV5hMu5XI5BgwYgKysLMyaNQtpaWnatszMTHz66ae4ffs25HJ5ocsxxdW1a1c4OzsjIiICe/bs0W5/9uwZFi5cqB3z+eCh+cxF3QiO6E3ByzFEJkQikWDlypUYMWIEtmzZgkOHDsHb2xs5OTk4d+4c8vLy0LVrV/zrX/8qtK+joyMmT56Mpk2bwsHBAWfPnsWjR4/QunVrBAQEaPu98847+PTTT7F48WKMGTMGjRs3hrOzM65fv467d++iatWqWLNmDWxtbYtVs52dHSpXroynT59i0KBBqFWrVpleOpkxYwauXbuG06dPo0uXLmjQoAGsra0RHR2NJ0+e4K233tJ7Zqi4ZDIZli5dinHjxuGzzz7Djh07UKNGDVy+fBlJSUlwdXVFYmKizsRSzSTgiIgIjB8/Hk2aNMGECRNe+7MSVTQ8E0JkYmrXro39+/djzJgxkMvl+PPPP3H9+nW88847WLJkCVatWqV3EurEiRMxc+ZMJCcnIyIiAvb29vj000/x3XffFZpkOmzYMPzwww/o2LEj7t69i+PHj0OtVmPEiBH49ddfC90B9GXMzMywYsUK1K1bF1evXsWff/5Z6A6tr0Mmk2Hz5s34/PPPUadOHVy6dAlRUVFwdHTElClTsGvXLtjb27/WGK1atcJPP/2EDh064P79+wgPD4ezszO2bNkCb29vAEClSpW0/b29vTFjxgw4ODjgzz//1HvJhuhNIBFKM3WbiExGYGAg9u3bh6CgIPj7+4tdToWTlpaGJ0+ewM3NDTKZrFD7Bx98gJiYGPz222+oW7euCBUSGS+eCSEieg0xMTHo2bMnxowZozMHBwB27dqFmJgY1K1blwGESA/OCSEiozNz5swS71NeS3BfpXnz5mjQoAHOnTsHPz8/NGrUCJaWlrh16xZu3bqFypUrY9myZaLURmTsGEKIyOjoe+7Mq4gVQiwsLPD9999j586dOHjwIKKjo5GdnQ1HR0cMHToUY8aMKfLuskRvOs4JISIiIlFwTggRERGJgiGEiIiIRMEQQkRERKJgCCEiIiJRMIQQERGRKBhCiIiISBQMIURERCQKhhAiIiISBUMIERERieL/AEWuoyAMM6xNAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Btw, is there any correlation between report length and its IFI label?\n",
    "sns.histplot(x='report_length', data=df, hue='y_report');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2afbcb8e",
   "metadata": {},
   "source": [
    "___\n",
    "# The annotation process\n",
    "### What to annotate?\n",
    "\n",
    "Now let's take a look at another report.\n",
    "\n",
    "Assuming no prior knowledge, which words or phrases would you identify as __related to fungal infection__?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7fa43710",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"URNO         XXXXXXXXX Lab No    XXXXXXXXX        Specimen  BAL \n",
      "\n",
      "\n",
      "CLINICAL NOTES: \n",
      "Lung Mass. \n",
      "?fungal ?malignant. \n",
      "\n",
      "MACROSCOPIC DESCRIPTION: \n",
      "RUL bronchoalveolar lavage: 1.5ml slightly cloudy fluid. \n",
      "\n",
      "MICROSCOPIC DESCRIPTION: \n",
      "The smears contain scattered alveolar macrophages, few lymphocytes and neutrophils and abundant bronchial cells. No Pneumocystis or other fungal elements are identified on the Grocott stain. There is no evidence of Pneumocystis jiroveci or fungal \n",
      "elements. No malignant cells are present. \n",
      "\n",
      "DIFFERENTIAL CELL COUNT      %   REFERENCE RANGE \n",
      "Alveolar macrophages          84%       (83-94%) \n",
      "Lymphocytes                10%        (5-16%) \n",
      "Neutrophils                 1%        (1-6%) \n",
      "Eosinophils                  0%        (0-1%) \n",
      "Bronchial cells                5%        (0-5%) \n",
      "\n",
      "DIAGNOSIS: \n",
      "RUL bronchoalveolar lavage: Normal cell count. \"\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(df.report.iloc[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf6c7ec4",
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "<li>The doctor suspects fungal infection: <code>?fungus</code></li>\n",
    "<br/>\n",
    "<li>Explicit negation of fungal infection: <code>no ... fungal elements are identified</code>, <code>no evidence of ... fungal elements</code></li>\n",
    "<br/>\n",
    "<li>What else? <code>Pneumocystis</code> is a type of fungi. <code>Grocott</code> is a dye that stains fungi.</li>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bdf09fb",
   "metadata": {},
   "source": [
    "___\n",
    "### The annotation schema\n",
    "From what we have seen above, what information in the report is **relevant to detecting fungal infection**?\n",
    "\n",
    "- Did the referring doctor suspect fungal infection?\n",
    "- What stains were used to examine the sample?\n",
    "- What organisms/species were mentioned?\n",
    "- Were these explicitly negated?\n",
    "\n",
    "How can we **categorise this information**? Let's define several concept categories: \n",
    "\n",
    "| **Concept category** | **Definition**                                                 |\n",
    "|:----------------------:|:----------------------------------------------------------------|\n",
    "| _ClinicalQuery_      | Queries about IFI                                              |\n",
    "| _FungalDescriptor_   | Generic descriptors of fungal elements                         |\n",
    "| _Fungus_             | Specific fungal organisms or syndromes                         |\n",
    "| _Invasiveness_       | Depth and degree of fungal invasion into tissues               |\n",
    "| _Stain_              | Names of histological stains used to visualise fungal elements |\n",
    "| _SampleType_         | Names of the sampled organ, site, or tissue source             |\n",
    "| _Positive_           | Affirmative expression                                         |\n",
    "| _Equivocal_          | Expression of uncertainty                                      |\n",
    "| _Negative_           | Negating expression                                            |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37c73b41",
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "source": [
    "The phrases we have identified in our example would fall into the following categories:\n",
    "- `?fungal` is a _ClinicalQuery_\n",
    "- `fungal elements` is a _FungalDescriptor_ (**note** that both instances are negated)\n",
    "- `Pneumocystis` is a _Fungus_\n",
    "- `Grocott` is a _Stain_"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c5cd226",
   "metadata": {},
   "source": [
    "Now, if we were to encounter a **new report**, we would be able to identify and categorise these phrases. Take a look at the report below, do you think it is positive or negative for fungal infection?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c50bab99",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"URNO     XXXXXXXXX \n",
      "Lab No    XXXXXXXXX        Specimen  BRONCHIAL WASHING \n",
      "\n",
      "\n",
      "CLINICAL NOTES: \n",
      "Immunosuppressed. Infiltrate. \n",
      "\n",
      "MACROSCOPIC DESCRIPTION: \n",
      "RLL bronchial washings: 2ml slightly blood stained mucoid fluid. \n",
      "NOTE: Specimen not labelled as to site. \n",
      "\n",
      "MICROSCOPIC DESCRIPTION: \n",
      "The smear contains scattered fungal hyphae. They appear thick, non-septate and branch at 90 degrees. The morphology is suggestive of Aspergillus. No viral inclusions are seen. The background contains occasional metaplastic cells, reactive pneumocytes, \n",
      "pigmented macrophages, degenerate cells and granular debris. There is no evidence of Pneumocystis jiroveci. No malignant cells are identified. \n",
      "\n",
      "DIAGNOSIS: \n",
      "RLL bronchial washings: No evidence of malignancy. Fungal elements resembling Aspergillus identified. \"\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(df.loc[25].report)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6292814",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-info\">\n",
    "Already familiar to us are the phrases <code>Pneumocystis</code>, which is a type of <i>Fungus</i>, and <code>fungal elements</code> categorised as <i>FungalDescriptor</i>. The report clearly states that <code>there is no evidence of Pneumocystis</code>.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "079b42d2",
   "metadata": {},
   "source": [
    "If at this point we were to ask a medical professional to **help us find other mentions of fungal infection**, they would point us to phrases:\n",
    "- `fungal hyphae`\n",
    "- `thick, non-septate and branch at 90 degrees`\n",
    "- `Aspergillus` \n",
    "\n",
    "The first two would be tagged as _FungalDescriptor_ and the latter as a type of _Fungus_.\n",
    "\n",
    "With this **additional knowledge** we can now confidently say that the report is positive for fungal infection: `the smear contains scattered fungal hyphae` and `fungal elements resembling Aspergillus identified` both suggest there is something going on. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7d8ce46",
   "metadata": {},
   "source": [
    "___\n",
    "### Annotations in the CHIFIR dataset\n",
    "The example above showed us why it is important to look through multiple reports to **collect as much information as possible**.\n",
    "\n",
    "Luckily, some kind medical professionals agreed to annotate all of our 283 reports tagging words and phrases that belong to one of the concept categories. We call them \"gold standard\". Let's take a look at what they have annotated:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcda83e9",
   "metadata": {},
   "source": [
    "| **Concept category** | **Examples** | **Total occurrences** | **Number of reports with at least one occurrence**| **Number of unique phrases** | **Lexical diversity** |\n",
    "|:----------------------:|:--------------------------------------------------------|:---:|:---:|:---:|:---:|\n",
    "| _ClinicalQuery_      | ?cryptococcus, ?fungal infection|65|53|36|0.55|\n",
    "| _FungalDescriptor_   | budding yeasts, fungal hyphae, pathogenic organisms|282|128|67|0.24|\n",
    "| _Fungus_             | aspergillus, candida, cryptococcal organisms|106|60|15|0.14|\n",
    "| _Invasiveness_       | angioinvasion, infiltration, intravascular spaces|37|12|25|0.68|\n",
    "| _Stain_              | alcian blue, d/pas, grocott, mucicarmine|172|100|13|0.08|\n",
    "| _SampleType_         | abdomen, cheek, lung, lymph node, skin|198|179|55|0.28|\n",
    "| _Positive_           | containing, favouring, resembling, suggestive|118|42|37|0.31|\n",
    "| _Equivocal_          | atypical, possibility, possible|7|5|5|0.71|\n",
    "| _Negative_           | do not feature, failed to identify, no evidence, not seen|152|104|11|0.07|\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22bd5d29",
   "metadata": {},
   "source": [
    "<!-- ___ -->\n",
    "<!-- ### Considerations when doing NER -->\n",
    "\n",
    "<!-- - **The size of the dataset**: We only have 283 reports and some concept categories (e.g., _Equivocal_) are very rare.\n",
    "+ **Lexical diversity**: There may be more than one way to say the same thing. _Stain_ and _Negative_ are looking good, _ClinicalQuery_ and _Invasiveness_ are going to be tricky.\n",
    "- **Very specific/narrow subject**: Pre-trained models / terminology sets are likely to be too generic.\n",
    " -->\n",
    "___\n",
    "# NER\n",
    "<div class=\"alert alert-block alert-success\">    \n",
    "<h3>Considerations when doing NER</h3>\n",
    "<br/>\n",
    "<li><b>The size of the datase:</b> We only have 283 reports and some concept categories (e.g., <i>Equivocal</i>) are very rare.</li>\n",
    "<br/>\n",
    "<li><b>Lexical diversity:</b> There may be more than one way to say the same thing. <i>Stain</i> and <i>Negative</i> are looking good, <i>ClinicalQuery</i> and <i>Invasiveness</i> are going to be tricky.</li>\n",
    "<br/>\n",
    "<li><b>Very specific/narrow subject:</b> Pre-trained models / terminology sets are likely to be too generic.</li>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7967ad9c",
   "metadata": {},
   "source": [
    "___\n",
    "### Dictionary-based approach\n",
    "**How does it work?**\n",
    "\n",
    "Think back to our example. Let's construct a dictionary of possible phrases for each concept category. Here is what our dictionary would look like this after reading through the first report:\n",
    "-  _ClinicalQuery_: `?fungal`\n",
    "-  _FungalDescriptor_: `fungal elements`\n",
    "-  _Fungus_: `Pneumocystis`\n",
    "-  _Stain_: `Grocott`\n",
    "\n",
    "After reading through the second report, we can add a few more phrases to our dictionary:\n",
    "-  _ClinicalQuery_: `?fungal`\n",
    "-  _FungalDescriptor_: `fungal elements`, `fungal hyphae`, `thick, non-septate and branch at 90 degrees`\n",
    "-  _Fungus_: `Pneumocystis`, `Aspergillus`\n",
    "-  _Stain_: `Grocott`\n",
    "\n",
    "Now, if we were to stop here, these two reports would constitute the **training set** and the updated dictionary would be our **learned dictionary**. The remaining unseen 281 reports would be the **test set**. Alternatively, we can continue updating the dictionary by parsing addtional reports."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec6c3abb",
   "metadata": {},
   "source": [
    "**What's in the learned dictionary?**\n",
    "\n",
    "There are a couple of things we need to keep track of when learning a dictionary:\n",
    "- The annotated phrase (e.g., `fungal hyphae`)\n",
    "- The assigned concept category (e.g., _FungalDescriptor_)\n",
    "- The start and end character positions (e.g., 150 and 163)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35398d3a",
   "metadata": {},
   "source": [
    "**Once we have learned the dictionary**\n",
    "\n",
    "Here are the steps to apply it to an **unseen report**:\n",
    "- Tokenise the report in the same manner as the reports in the training set.\n",
    "- Scan the report to find tokens that match the learned dictionary.\n",
    "- If there is a match, record the start and the end character positions and the concept category. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2223ada8",
   "metadata": {},
   "source": [
    "**What to expect?**\n",
    "- Poor performace if the **training set is too small**.\n",
    "- Poor performance if **lexical diversity is high**. This includes **spelling mistakes!**\n",
    "- Good performance if the **language is consistent** and if **context does not play a big part**.\n",
    "- **Very easy to interpret**. Good if you want to be able to visualise the workings of your NER and present it to non-tech audiences. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11991f24",
   "metadata": {},
   "source": [
    "___\n",
    "### Conditional random fields (CRF) model\n",
    "**How does it work?**\n",
    "\n",
    "Let's think a bit about the **context**. \n",
    "\n",
    "Some phases are unambiguous, such as scientific names of fungal species. Others are open to more than one interpretation, for example, the word `organisms` might refer to a fungal, bacterial, or possibly viral infection.\n",
    "- While the dictionary-based approach might know to recognise `fungal organisms`, a slightly more complex phrase `organisms of fungal origin`, if not seen before, would present a challenge. \n",
    "- Same goes for false positives: we would not want to pick up `organisms` if the context it is mentioned in has nothing to do with fungal infection. \n",
    "\n",
    "A CRF model allows to incorporate **contextual features** to address this ambiguity. The goal here is to augment a given word with attributes describing its position in the text and spatial (contextual) relation to other words in the document."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56d163d1",
   "metadata": {},
   "source": [
    "**Which features to include?**\n",
    "\n",
    "In this exercise we included the following word attributes:\n",
    "- The start and end character positions\n",
    "- Capitalisation patterns (i.e., if the word starts with a capital letter, is uppercased, lowercased, or has alternating casing)\n",
    "- Morphologic patterns (i.e., word prefixes and suffixes)\n",
    "- Numeric and punctuation patterns (i.e., if the word contains any digits, hyphens, etc.)\n",
    "\n",
    "Other common attributes are: **part-of-speech tags**, **sentence-level position**, **previous and following words**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4416fab",
   "metadata": {},
   "source": [
    "\n",
    "**How to apply to new data?**\n",
    "\n",
    "**What to expect?**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "335b683c",
   "metadata": {},
   "source": [
    "___\n",
    "### Transformer-based model\n",
    "**How does it work?**\n",
    "\n",
    "**How to apply to new data?**\n",
    "\n",
    "**What to expect?**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f95d1e2b",
   "metadata": {},
   "source": [
    "**Results**\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ed27829",
   "metadata": {},
   "source": [
    "- Results\n",
    "- Pros & Cons"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32e85d1d",
   "metadata": {},
   "source": [
    "- Equivocal/positive terms: can we implement \"uncertainty\"/\"affirmation\" detection?\n",
    "- How to pre-annotate the data? E.g., use Metamap then feed into clinicians.\n",
    "- Tools for annotating the data: brat. \n",
    "- Tools for NER: medcat, MetaMap, etc\n",
    "- Can mention relation extraction, concept linking. Give pointers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01b94df1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
